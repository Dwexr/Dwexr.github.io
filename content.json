{"pages":[],"posts":[{"title":"PhpStorm2018许可过期解决方法","text":"1.首先先打开 （该地址目前还没崩。。。。）获取注册码，并复制粘贴。 2.然后把注册码复制到激活界面，点击ok即可激活","link":"/2019/05/06/PhpStorm2018许可过期解决方法/"},{"title":"Laravel之DB facade 实现CURD","text":"连接数据库打开文件\\vendor\\.env文件进行修改。 123456DB_CONNECTION=mysqlDB_HOST=localhostDB_PORT=3306DB_DATABASE=laravelDB_USERNAME=rootDB_PASSWORD=root 路由设置(方法很多）1Route::any('text1' , ['uses' =&gt; 'StudentController@text1']); 控制器文件—StudentController.php12345678910111213141516171819202122232425262728&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Support\\Facades\\DB;//DB facade 实现CURD(增删改查)class StudentController extends Controller{ public function text1(){ //新增 $bool = DB::insert('insert into student(name, age) value (?, ? )',['Rabbit',10 ]); var_dump($bool);// //更新// $num = DB::update('update student set age=? where name =? ', [9,'Rabbit']);// var_dump($num); //查询// 测试是否连接成功数据库，若成功会查出一个数组，如果为空表，则返回一个空数组。// $students = DB::select('select * from student where id &gt; ?',[1]);// dd($students); //删除// $num = DB::delete('delete from student where id&gt;?', [1]);// var_dump($num); }}","link":"/2019/04/27/CURD/"},{"title":"Laravel学习中的坑（一）","text":"Laravel之No application encryption key has been specified在创建了新的laravel项目后, 运行提示:No application encryption key has been specified 解决方法：在终端上运行，cd到Laravel项目目录位置然后执行:1php artisan key:generate 在服务器上把本地的Laravel项目部署到服务器上时，发现在运行时，会报如下错误，提示找不到日志，而且路径是本地所在路径。更可怕的是我给项目文件权限也没用。1chmod -R 777 storage 解决方法：123php artisan cache:clearphp artisan route:clearphp artisan dump-autoload","link":"/2019/05/11/Laravel学习中的坑（一）/"},{"title":"Linux常用的一些命令","text":"1.删除文件-r 就是向下递归，不管有多少级目录，一并删除-f 就是直接强行删除，不作任何提示的意思 删除文件夹实例，在删除整个文件夹时，无需进入该文件所在路径，可通过rm -rf +文件夹所在路径删除。1rm -rf /usr/local/nginx/html/test 删除单个文件，可进入该文件所在文件夹，通过rm -f+文件名删除。1rm -f one.html 删除单个文件也可通过rm -f +路径+文件名删除。1rm -f /usr/local/nginx/html/one.html 2.显示文件夹所含所有文件1ls 3.查看Linux输入命令的历史会话1history 4.Nginx重启1/usr/local/nginx/sbin/nginx -s reload 12cd /usr/local/nginx/sbin./nginx -s reload 5.改变文件权限在Unix和Linux的各种操作系统下，每个文件（文件夹也被看作是文件）都按读、写、运行设定权限。 | + : 表示增加权限、- 表示取消权限、= 表示唯一设定权限| r : 表示可读取，w 表示可写入，x 表示可执行。| u : 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人。| -R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更) 例：将档案（单个文件）设为所有人皆可读取。第一种：1chmod ugo+r file1.txt 第二种：1chmod a file1.txt 可用字母表示对象，可用数字表示权限。例：将当前目录所有档案与子目录设为可读取、写入、执行。1chmod -R 777 storage 转：https://blog.csdn.net/marleylee/article/details/77251288 ##","link":"/2019/07/07/Linux操作/"},{"title":"Hailstone Sequence","text":"希尔顿序列问题是一个著名的数学问题，至今未证明其正确性，也没证明其错误性，即任何一个正整数N，如果是偶数的话就除以2，如果是奇数的话就乘以3再加上1，最后这个数都会变为1。其表达式如下： 通过递归发现，每次对n这个数字进行判断奇偶性，采用不同的计算公式。 例:当n=5的时候， 结果：Halistone(5)={5,16,8,4,2,1} 12345678int halistone(int n){int length =0;while(n&gt;1){ (n%2)?n/=2:n=n*3+1; length++; } return length;} 由于该程序无法判断有穷性，所以该程序不能作为算法。 总结： 程序未必等于算法，要满足算法的有穷性。","link":"/2019/07/25/Hailstone问题/"},{"title":"cmd中启动tomcat出现乱码的解决方案","text":"问题：在Tomcat的本地目录bin中运行startup.bat时，我们会看到出现中文乱码。 由于出现乱码是一件非常影响视觉的享受，所以我去尝试了改/bin/catalina.bat和/conf/server.xml。 但并没有用。 解决：找到Tomcat中的logging.properties，用编辑器打开，这里用的是Notepad++。 将java.util.logging.ConsoleHandler.encoding = UTF-8 改为java.util.logging.ConsoleHandler.encoding = GBK 然后就可以正常显示中文了。","link":"/2019/08/25/cmd中启动tomcat出现乱码的解决方案/"},{"title":"PhpWord制作表格之合并单元格","text":"在通过对项目下载安装了PhpWord的安装包后，在vendor/phpoffice/phpword/src/PhpWord/Style/Cell.php中可看到GridSpan和VMerge的方法。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374public function getGridSpan(){ return $this-&gt;gridSpan;}/** * Set grid span (colspan) * * @param int $value * @return self */public function setGridSpan($value = null){ $this-&gt;gridSpan = $this-&gt;setIntVal($value, $this-&gt;gridSpan); return $this;}/** * Get vertical merge (rowspan). * * @return string */public function getVMerge(){ return $this-&gt;vMerge;}/** * Set vertical merge (rowspan) * * @param string $value * @return self */public function setVMerge($value = null){ $enum = array(self::VMERGE_RESTART, self::VMERGE_CONTINUE); $this-&gt;vMerge = $this-&gt;setEnumVal($value, $enum, $this-&gt;vMerge); return $this;}/** * Get shading * * @return \\PhpOffice\\PhpWord\\Style\\Shading */public function getShading(){ return $this-&gt;shading;}/** * Set shading * * @param mixed $value * @return self */public function setShading($value = null){ $this-&gt;setObjectVal($value, &apos;Shading&apos;, $this-&gt;shading); return $this;}/** * Get cell width * * @return int */public function getWidth(){ return $this-&gt;width;} #表格实战123456789101112131415161718192021222324252627282930313233343536373839//自定义样式 $myStyle = &apos;mystyle&apos;; $phpword -&gt;addFontStyle( $myStyle, [ &apos;name&apos; =&gt; &apos;Joker&apos;, &apos;size&apos; =&gt; 15, &apos;color&apos; =&gt; &apos;000000&apos;, &apos;bold&apos; =&gt; true, &apos;spaceAfter&apos; =&gt; 500, ] ); $styleFirstRow = [&apos;bgColour&apos; =&gt; &apos;66BBEF&apos;]; $phpword -&gt;addTableStyle(&apos;mytable&apos; , $styleTable , $styleFirstRow ); //添加表格样式 $table = $section-&gt;addTable(&quot;mytable&quot; , $styleTable); $table -&gt;addRow(); $table -&gt;addCell(4000)-&gt;addText(&quot;姓名&quot; , $myStyle); $table -&gt;addCell(4000)-&gt;addText(&quot;民族&quot; , $myStyle); $table -&gt;addCell(6000) -&gt; addText(&quot;政治面貌&quot; , $myStyle); $table -&gt;addCell(2000,array(&apos;vMerge&apos; =&gt; &apos;restart&apos;))-&gt;addText(&quot;大头照&quot; , $myStyle); $table -&gt;addRow(); $table -&gt;addCell(4000) -&gt;addText(&quot;出生年月&quot; , $myStyle); $table -&gt;addCell(4000) -&gt;addText(&quot;年级专业&quot; , $myStyle); $table -&gt;addCell(4000) -&gt;addText(&quot;学号&quot; , $myStyle); $table -&gt;addCell(4000,array(&apos;vMerge&apos; =&gt; &apos;continue&apos;)); $table -&gt;addRow(100); $table -&gt;addCell(4000,array(&apos;gridSpan&apos; =&gt; 2)) -&gt;addText(&quot;手机号码&quot; , $myStyle); $table -&gt;addCell(4000,array(&apos;gridSpan&apos; =&gt; 1)) -&gt;addText(&quot;曾任职务&quot; , $myStyle); $table -&gt;addCell(4000,array(&apos;vMerge&apos; =&gt; &apos;continue&apos;)); $table -&gt;addRow(100); $table -&gt;addCell(4000,array(&apos;gridSpan&apos; =&gt; 2)) -&gt;addText(&quot;第一志愿&quot; , $myStyle); $table -&gt;addCell(4000,array(&apos;gridSpan&apos; =&gt; 2)) -&gt;addText(&quot;第二志愿&quot; , $myStyle); $table -&gt;addRow(3200); $table -&gt;addCell(8000,array(&apos;gridSpan&apos; =&gt; 4)) -&gt;addText(&quot;个人简介&quot; , $myStyle); $table -&gt;addRow(3200); $table -&gt;addCell(8000,array(&apos;gridSpan&apos; =&gt; 4)) -&gt;addText(&quot;你对星空学生创新中心的理解以及对所在方向的认识&quot; , $myStyle); 效果如下： 反复爬坑 附：官方文档——https://phpword.readthedocs.io/en/latest/recipes.html","link":"/2019/07/06/PhpWord制作表格之合并单元格/"},{"title":"Git命令","text":"git命令解释123456ls 查看文件夹的文件列表cat +文件名.__ 显示文件内容 git log 显示从最近到最远（之前）的提交日志（查看提交历史）git reflog 显示记录的每条命令（查看命令历史）其中Head指针指向的版本即当前版本git reset --hard HEAD^ 从当前版本回退上一个版本，回退后可用git log 查看 CMD中的^作为转义字符12git status 显示工作目录和暂存区的状态，如果告诉我文件被修改过，可用git diff查看修改内容，如果已经commit过，暂存区就没任何内容。git diff 用于比较两次修改的差异 stash相关常用命令：123456git stash 将当前工作区所有修改过的内容存储到“某个地方”，将工作区还原到当前版本未修改过的状态git stash list 查看“某个地方”存储的所有记录git stash clear 清空“某个地方”git stash pop 将第一个记录从“某个地方”重新拿到工作区（可能有冲突）git stash apply 编号, 将指定编号记录从“某个地方”重新拿到工作区（可能有冲突） git stash drop 编号，删除指定编号的记录 往Git版本库添加文件12第一步： git add 把文件修改添加到暂存区第二步： git commit 把暂存区的所以内容提交到当前分 branch相关常用命令：123456git branch 分支名称 创建分支git checkout 分支名称 切换分支git branch -m 分支名称 创建并切换到指定分支git branch 查看所有分支git branch -d 分支名称 删除分支git merge 分支名称 将指定分支合并到当前分支","link":"/2019/04/24/git命令/"},{"title":"git error：failed to push some refs to","text":"在执行本地上传到远程库的时候报了错误error：failed to push some refs to ‘git@github.com:……’。 以及hint(提示）表明在执行’git push…’前要执行’git pull’。 原因：本地仓库代码与远程仓库代码有冲突 解决：将本地修改变更的部分和远程仓库中修改变更的部分进行合并 拉取（下载）指定分支代码合并到当前分支 1git pull orign master 将当前分支推送到origin主机的对应分支： 1git push orgin master 注意此处： 在拉取合并分支的时候，我增加了rebase， 1git pull --rebase orgin master 那么这个跟我上面不加参数的拉取合并有什么区别呢?为什么要使用rebase? 从git pull分析 12git pull = git fetch + git merge FETCH_HEAD git pull --rebase = git fetch + git rebase FETCH_HEAD git pull操作其实是git fetch 与 git merge 两个命令的集合。 git pull 等效于先执行 git fetch origin 当前分支名, 再执行 git merge FETCH_HEAD. 关于merge 与 rebase 比如现在我们有两个分支orign和mywork。 现在要把mywork合并到orgin，有两种方法。 - git pull ![3](git7-25/3.png) - git pull --rebase orgin master ![4](git7-25/4.png) 上面可以看出 - merge操作会生成一个新的节点，之前的提交分开显示。 - rebase操作不会生成新的节点，是将两个分支融合成一个线性的提交。 正常的解决冲突过程 12345git add .git commit -m &quot;...&quot; git push时因为本地仓库代码与远程仓代码有冲突，所以接下来git pull //拉取远程代码，而冲突需要手动解决解决好后重新进行git add . git commit -m&quot;..&quot; git push 含rebase的解决冲突过程 1234567git add .git commit -m &quot;...&quot; git push时因为本地仓库代码与远程仓代码有冲突，所以接下来git pull --rebase //拉取远程代码，而冲突需要手动解决git add. git rebase --continue //确认处理好冲突后则将调整好的文件添加到暂存区，并执行该命令告诉git，我已经解决好冲突了。git push 总结 git pull –rebase用在合并代码的时候其作用就是在一个随机创建的分支上处理冲突，避免了直接污染原来的分区 merge 操作遇到冲突的时候，当前merge不能继续进行下去。 手动修改冲突内容后，add 修改，commit 就可以了。 rebase 操作遇到冲突的时候，会中断rebase,同时会提示去解决冲突。解决冲突后,不需要commit。 将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。 push到远端。 git push -u origin master 使用之后可以将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。","link":"/2019/07/25/git7-25/"},{"title":"Hexowrite","text":"发布文章(1)新建一个空文章，输入以下命令，会在项目 \\Hexo\\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名。1$ hexo n 文章标题; 也可以直接在 \\Hexo\\source\\_posts 目录下右键鼠标新建文本文档，改后缀为 .md 即可，这种方法比较方便。 (2)用编辑器编辑.md文件，我用的是小书匠。 (3)git上传文章第一种：1$ hexo d -g ; 第二种：1$ hexo g; 1$ hexo d;","link":"/2019/04/27/hexowrite/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/04/24/hello-world/"},{"title":"laravel数据库操作篇","text":"","link":"/2019/04/27/laravel数据库操作篇/"},{"title":"git创建并合并分支","text":"创建与合并分支 找到自己的本地仓库，若没有则执行下面语句进行创建。 1$ git init 创建并切换分支 1$ git checkout -b test1 12$ git branch test1$ git checkout test1 在执行完上面的命令后，可以通过下面命令查看 1$ git branch 此时分支位于test1,在分支上进行对文件修改。 接着在test1分支上提交 1$ git add * //git add * 会忽略.gitignore把任何文件都加入 1$ git add . //git add . 会把本地所有untrack的文件都加入暂存区，并且会根据.gitignore做过滤。 1$ git commit -m &apos;The first&apos; //进行标注 现在我们要切换回master分支 1$ git checkout master 此时我们的分支为master分支，我们要把master分支与test1分支进行合并 1$ git merge test1 分支合成完后，就可以删除test1分支. 1$ git branch -d test1 我们可以查看分支，看看是否删除成功。 1$ git branch","link":"/2019/09/05/git创建并合并分支/"},{"title":"java之IO流学习","text":"IO流（输入流、输出流）字节流、字符流1.字节流（1）InputStream、OutputStream InputStream抽象了应用程序读取数据的方式 OutputStream抽象了应用程序写出数据的方式（2）EOF = End 读到-1就读到结尾（3）输入流基本方法 int b = in.read(); 读取一个字节无符号填充到int低八位。 -1是EOF in.read(byte[] buf) in.read(byte[] buf,int start,int size)（4)输出流基本方法 out.write(int b) 写出一个byte到流，b的低八位 out.write(byte[] buf)将buf字节数组都写入到流 out.write(byte[] buf,int start,int size)（5）FileinputStream实现字符流文件读取 2.所有的IO会抛出IOException异常解决：1import java.io.IOException; 同时不要忘了捕捉异常,以IOException为例。123456try {i.print(&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\text\\\\git.txt&quot;);} catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace();} ——————————————-我是补坑的分割线—————————————–3.java之矩阵输出12345678FileInputStream in = new FileInputStream();&lt;!--此时该方法会抛出异常，请throws--&gt;while((b=in.read())!=-1){ System.out.print(b); if(i++%5==0){ System.out.println(&quot;&quot;);&lt;!--实现每5个换行--&gt; }} ——————————————-我是补坑的分割线—————————————–4.关于异常IOException与FileNotFoundException的关系 ——————————————-我是补坑的分割线—————————————–5.建立FileInputStream对象第一种：1InputStream inputstream1 = new FileInputStream(new File(&quot;C:\\\\\\\\git.txt&quot;)); 第二种：12File file1 = new File(&quot;C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Desktop\\\\\\\\text\\\\\\\\git.txt&quot;);FileInputStream f = new FileInputStream(file1); 第三种：12File file2 = new File(&quot;C:\\\\\\\\Users\\\\\\\\Administrator\\\\\\\\Desktop\\\\\\\\text\\\\\\\\git.txt&quot;);InputStream inputstream = new FileInputStream(file2); ——————————————-我是补坑的分割线—————————————– 6.InputStream中的read()方法 在没有参数的情况下，流的数据会传到栈里。 7.FileInputStream里都是采用绝对路径，也可以获取父路径来获取相对路径。","link":"/2019/05/16/java之字节流/"},{"title":"Windows自带的远程连接","text":"一、查询局域网电脑IP地址。方法： 通过快捷键WIN+R，输入cmd，弹出命令提示符窗口，接着输入 1ipconfig 找到ipv4的地址，即为该用户主机的地址。二、对需要进行远程连接功能的电脑进行配置。 在win7或win10之中找到此电脑，点击右键，找到【属性】，点击远程设置。 找到远程桌面，勾选允许远程连接到此计算机。 二、打开远程连接功能方法： 通过快捷键WIN+R，输入cmd,弹出命令提示符窗口,接着输入 1mstsc 2.然后在远程连接的界面中，点击【显示选项】，在计算机中输入远程服务器的IP地址，以及用户名。","link":"/2019/06/23/windows自带的远程连接/"},{"title":"permission denied （publickey）的解决问题","text":"配置问题 检查本地C:\\Users\\电脑用户名\\下是否有.ssh这个文件夹 123cd ~/.sshlscat 名字.pub 若没有则新建 1ssh-keygen -t rsa -C &quot;你的邮箱&quot; 在Github上设置 先点击Settings 接着点击SSH and GPG keys，设置全局key。 再点击New SSH key绿色按钮 将名字.pub的文件内容复制到key的文本框中，并提交就设置好了。 检查连接 成功与否 1ssh -T git@github.com 若不成功，可检查邮箱密码是否配置好了 123git config user.name/user.emailgit config --global user.namegit config --global user.email youremail 命令问题 我之前有过命令上的错误，在git remote add这里，正确格式是： 1git remote add origin git@github.com:yourname/yourproject.git 错误格式是： 1git remote add origin yourname@github.com:yourname/yourproject.git yourname —— Github的用户名 yourproject ——Github的库名 youremail ——Github注册的邮箱 注意 在官方文档中 Once a key has been attached to one repository as a deploy key, it cannot be used on another repository. 一个键作为部署的ssh key使用只能绑定一个仓库。 由于Github里每个库设置的SSH只能被一个库用，即库A用了本机的key，另一库B再配置同样的key，Github会提示Key is already in use。 所以如果你想用一个key配置多个不同仓库的SSH-key，可通过Github中的SSH and GPG keys 进行全局配置。即配置一个全局SSH-Key。","link":"/2019/07/22/permission-denied-publickey的解决问题/"}],"tags":[],"categories":[]}